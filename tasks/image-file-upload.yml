---
# Uploading software image to the device
- name: Set facts
  ansible.builtin.set_fact:
    sw_image_file_path: "{{ tmp_root_dir }}/{{ git_repo_name }}/{{ vendor_dir }}/{{ software_image_file_name }}"
  delegate_to: localhost 

- name: Clone the os images git artifacts
  ansible.builtin.git:
    repo: "{{ git_repo_url }}"
    dest: "{{ tmp_root_dir }}/{{ git_repo_name }}"
    version: "{{ git_repo_branch }}"
    force: yes 
  # ignore_errors: true # You want your play to fail if git clone process fails
  run_once: true
  delegate_to: localhost 

- name: Confirm file exists within the ansible controller
  ansible.builtin.stat:
    path: "{{ sw_image_file_path }}"
  register: file_check

- name: "Assert {{ software_image_file_name }} exists on the local - FAIL Playbook if NOT existing"
  ansible.builtin.assert:
    that:
      - file_check.stat.exists
    fail_msg: "{{ software_image_file_name }} does not exist on local. Playbook stopped"
    success_msg: "{{ software_image_file_name }} exists on local. Proceeding with the next tasks."
  delegate_to: localhost 

- name: Scp file from ansible controller to the juniper device
  ansible.builtin.shell: |
    sshpass -p '{{ ansible_password }}' scp -o StrictHostKeyChecking=no {{ sw_image_file_path }} {{ ansible_user }}@{{ ansible_host }}:{{ juniper_device_tmp_storage }} 
  delegate_to: localhost
  register: upload_result
  ignore_errors: true

# - name: Debug upload result
#   ansible.builtin.debug:
#     var: upload_result
#   delegate_to: localhost
#   ignore_errors: true

- name: List files
  junipernetworks.junos.junos_command:
    commands: "file list {{ juniper_device_tmp_storage }}"
  register: file_list
  ignore_errors: true

# - name: Debug upload result
#   ansible.builtin.debug:
#     var: file_list["stdout_lines"][0]
#   delegate_to: localhost
#   ignore_errors: true

- name: "Assert {{ software_image_file_name }} exists on the Juniper device - FAIL Playbook if NOT existing"
  ansible.builtin.assert:
    that:
      - software_image_file_name in file_list.stdout[0]
    fail_msg: "{{ software_image_file_name }} does not exist on Juniper device. Playbook stopped"
    success_msg: "{{ software_image_file_name }} exists on Juniper device. Proceeding with the next tasks."
  delegate_to: localhost

# Might not need this since containers are ephemeral.
# But if testing or end up running the playbook more than once in the same container, this comes in handy
- name: Clean up files
  ansible.builtin.shell: |
    cd {{ tmp_root_dir }}
    rm -rf {{ git_repo_name }}
  run_once: true
  ignore_errors: true
  delegate_to: localhost