---
# software upgrade tasks

# Collect Junos facts
- name: Gather Junos-specific facts - PRE-UPGRADE
  junipernetworks.junos.junos_facts:
    gather_subset:
      - hardware        # Hardware-related facts like chassis info
      - config         # Configuration information
      #- interfaces     # Interface details
      - default         # default values
  register: junos_facts
  ignore_errors: true # You want the role to run end to end

- name: Set PRE-UPGRADE OS Version
  ansible.builtin.set_fact:
    pre_upgrade_os_version: "{{ junos_facts.ansible_facts['ansible_net_version'] }}"
  ignore_errors: true # You want the role to run end to end

# Confirm image is already uploaded on the device
- name: List files on the device
  junipernetworks.junos.junos_command:
    commands: "file list {{ _juniper_device_file_dir_ }}"
  register: file_list
  ignore_errors: true

# - name: Debug file_list
#   ansible.builtin.debug:
#     var: file_list["stdout_lines"][0]
#   delegate_to: localhost
#   ignore_errors: true

- name: "Assert {{ _software_image_file_name_ }} exists on the Juniper device - FAIL Playbook if NOT existing"
  ansible.builtin.assert:
    that:
      - _software_image_file_name_ in file_list.stdout[0]
    fail_msg: "{{ _software_image_file_name_ }} does not exist on Juniper device. Playbook stopped"
    success_msg: "{{ _software_image_file_name_ }} exists on Juniper device. Proceeding with the next tasks."
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end

- name: Install Junos OS package - junipernetworks.junos.junos_package
  junipernetworks.junos.junos_package:
    src: "{{ _juniper_device_file_dir_ }}/{{ _software_image_file_name_ }}"
    reboot: true
    issu: false
    no_copy: true # Image already uploaded in the device
    validate: false
    force: true
    provider: "{{ _provider_ }}"
  ignore_errors: true
  register: sw_upgrade

- name: Debug sw_upgrade output
  ansible.builtin.debug:
    var: sw_upgrade
  delegate_to: localhost
  ignore_errors: true

- name: Sleep for 6 minutes and continue with play
  ansible.builtin.wait_for:
    timeout: 360
  delegate_to: localhost

# Collect Junos facts
- name: Gather Junos-specific facts - POST-UPGRADE
  junipernetworks.junos.junos_facts:
    gather_subset:
      - hardware        # Hardware-related facts like chassis info
      - config         # Configuration information
      #- interfaces     # Interface details
      - default         # default values
  register: junos_facts
  ignore_errors: true # You want the role to run end to end

- name: Set POST-UPGRADE OS Version
  ansible.builtin.set_fact:
    post_upgrade_os_version: "{{ junos_facts.ansible_facts['ansible_net_version'] }}"
  ignore_errors: true # You want the role to run end to end

- name: Display OS version comparison
  ansible.builtin.debug:
    msg:
      - "PRE-UPGRADE OS VERSION = {{ pre_upgrade_os_version }}"
      - "POST-UPGRADE OS VERSION = {{ post_upgrade_os_version }}"
  ignore_errors: true # You want the role to run end to end