---
# Upload file to juniper device from Ansible Controller
- name: Debug some output
  ansible.builtin.debug:
    var: file_source
  delegate_to: localhost

- name: "upload {{ software_image_file_name }} to {{ juniper_device_file_dir }} directory on {{ juniper_device_hostname }}"
  junipernetworks.junos.junos_scp:
    src: "{{ file_source }}"
    dest: "{{ juniper_device_file_dir }}"
    provider: "{{ provider }}"
  # no_log: true

# A good plan, latency wise, but no module that hides scp credentials especially on fail
# - name: Copy OS image directly from artifact server to Juniper device
#   junipernetworks.junos.junos_rpc:
#     rpc: "file-copy"
#     args:
#       source: "scp://{{ artifact_host_user }}:{{ artifact_host_password }}@{{ artifact_host }}{{ artifact_host_root_dir }}/{{ software_image_file_name }}"
#       destination: "{{ juniper_device_file_dir }}/{{ software_image_file_name }}"
#     provider: "{{ provider }}"
#   register: file_copy_result

# - name: Run file copy command directly on the router
#   ansible.builtin.raw: |
#     file copy scp://{{ artifact_host_user }}:{{ artifact_host_password }}@{{ artifact_host }}{{ artifact_host_root_dir }}/{{ software_image_file_name }}
#   register: file_copy_result

# Confirm image is already uploaded on the device
- name: List files on the device
  junipernetworks.junos.junos_command:
    commands: "file list {{ juniper_device_file_dir }}"
  register: file_list
  ignore_errors: true

# - name: Debug file_list
#   ansible.builtin.debug:
#     var: file_list["stdout_lines"][0]
#   delegate_to: localhost
#   ignore_errors: true

- name: "Assert {{ software_image_file_name }} exists on the {{ juniper_device_hostname }} - FAIL Playbook if NOT existing"
  ansible.builtin.assert:
    that:
      - software_image_file_name in file_list.stdout[0]
    fail_msg: "{{ software_image_file_name }} does not exist on {{ juniper_device_hostname }}. Playbook stopped"
    success_msg: "{{ software_image_file_name }} exists on {{ juniper_device_hostname }}. Proceeding with the next tasks."
  delegate_to: localhost
  ignore_errors: true # You want the role to run end to end